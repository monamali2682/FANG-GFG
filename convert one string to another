Given two strings S and T, which contains three characters i.e 'A', 'B' and '#' only. Check whether it is possible to convert the first string
into another string by performing following operations on string first.
1- A can move towards Left only
2- B can move towards Right only
3- Neither A nor B should cross each other
Note: Moving i'th character towards Left one step means swap i'th with (i-1)'th charecter [ i-1>=0 ]. Moving i'th character towards Right one step means
swap i'th with (i+1)'th charecter [ i+1< string's length ]

// check crio/selfnotes/ fang practise folder for diagram

We just want to verify the order of the characters {A and B } in both strings.
Along with that we have to keep the track of the index repective to a character , so that if the sequence is like :
S= ####B
T= B####
Order is same but the S string could not be obtained due to the constraints on B {as it can move only rightwards}.
Also attaching code with comment below



    int isItPossible(string s, string t, int M, int N) {
        
        // to maintain the order as well as indices of the char.
       vector<pair<char,int>>v1,v2; 
        for(i=0;i<n;i++)
        { 
            if(s[i]!='#')
            v1.push_back({s[i],i});
            if(t[i]!='#')
            v2.push_back({t[i],i});
          
        }
        
        if(v1.size()!=v2.size())
        return 0;
        
        for(i=0;i<v1.size();i++){
            // If the order don't match
            if(v1[i].first!=v2[i].first)
            return 0;
            else
            {
               if(v1[i].first=='A'){
                   //ex : t=##A and s=A##
                   if(v1[i].second<v2[i].second)
                   return 0;
               }
               else {
                   //ex : s=##B and t=B##
                   if(v1[i].second>v2[i].second)
                   return 0;
               }
            }
        }
        return 1;
    
    }
 
